// Generated by Haxe 3.4.7
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Attribute = { __ename__ : true, __constructs__ : ["Off","Bold","Underline","Blink","ReverseVideo","Concealed","BoldOff","UnderlineOff","BlinkOff","NormalVideo","ConcealedOff","Black","Red","Green","Yellow","Blue","Magenta","Cyan","White","DefaultForeground","BlackBack","RedBack","GreenBack","YellowBack","BlueBack","MagentaBack","CyanBack","WhiteBack","DefaultBackground"] };
Attribute.Off = ["Off",0];
Attribute.Off.toString = $estr;
Attribute.Off.__enum__ = Attribute;
Attribute.Bold = ["Bold",1];
Attribute.Bold.toString = $estr;
Attribute.Bold.__enum__ = Attribute;
Attribute.Underline = ["Underline",2];
Attribute.Underline.toString = $estr;
Attribute.Underline.__enum__ = Attribute;
Attribute.Blink = ["Blink",3];
Attribute.Blink.toString = $estr;
Attribute.Blink.__enum__ = Attribute;
Attribute.ReverseVideo = ["ReverseVideo",4];
Attribute.ReverseVideo.toString = $estr;
Attribute.ReverseVideo.__enum__ = Attribute;
Attribute.Concealed = ["Concealed",5];
Attribute.Concealed.toString = $estr;
Attribute.Concealed.__enum__ = Attribute;
Attribute.BoldOff = ["BoldOff",6];
Attribute.BoldOff.toString = $estr;
Attribute.BoldOff.__enum__ = Attribute;
Attribute.UnderlineOff = ["UnderlineOff",7];
Attribute.UnderlineOff.toString = $estr;
Attribute.UnderlineOff.__enum__ = Attribute;
Attribute.BlinkOff = ["BlinkOff",8];
Attribute.BlinkOff.toString = $estr;
Attribute.BlinkOff.__enum__ = Attribute;
Attribute.NormalVideo = ["NormalVideo",9];
Attribute.NormalVideo.toString = $estr;
Attribute.NormalVideo.__enum__ = Attribute;
Attribute.ConcealedOff = ["ConcealedOff",10];
Attribute.ConcealedOff.toString = $estr;
Attribute.ConcealedOff.__enum__ = Attribute;
Attribute.Black = ["Black",11];
Attribute.Black.toString = $estr;
Attribute.Black.__enum__ = Attribute;
Attribute.Red = ["Red",12];
Attribute.Red.toString = $estr;
Attribute.Red.__enum__ = Attribute;
Attribute.Green = ["Green",13];
Attribute.Green.toString = $estr;
Attribute.Green.__enum__ = Attribute;
Attribute.Yellow = ["Yellow",14];
Attribute.Yellow.toString = $estr;
Attribute.Yellow.__enum__ = Attribute;
Attribute.Blue = ["Blue",15];
Attribute.Blue.toString = $estr;
Attribute.Blue.__enum__ = Attribute;
Attribute.Magenta = ["Magenta",16];
Attribute.Magenta.toString = $estr;
Attribute.Magenta.__enum__ = Attribute;
Attribute.Cyan = ["Cyan",17];
Attribute.Cyan.toString = $estr;
Attribute.Cyan.__enum__ = Attribute;
Attribute.White = ["White",18];
Attribute.White.toString = $estr;
Attribute.White.__enum__ = Attribute;
Attribute.DefaultForeground = ["DefaultForeground",19];
Attribute.DefaultForeground.toString = $estr;
Attribute.DefaultForeground.__enum__ = Attribute;
Attribute.BlackBack = ["BlackBack",20];
Attribute.BlackBack.toString = $estr;
Attribute.BlackBack.__enum__ = Attribute;
Attribute.RedBack = ["RedBack",21];
Attribute.RedBack.toString = $estr;
Attribute.RedBack.__enum__ = Attribute;
Attribute.GreenBack = ["GreenBack",22];
Attribute.GreenBack.toString = $estr;
Attribute.GreenBack.__enum__ = Attribute;
Attribute.YellowBack = ["YellowBack",23];
Attribute.YellowBack.toString = $estr;
Attribute.YellowBack.__enum__ = Attribute;
Attribute.BlueBack = ["BlueBack",24];
Attribute.BlueBack.toString = $estr;
Attribute.BlueBack.__enum__ = Attribute;
Attribute.MagentaBack = ["MagentaBack",25];
Attribute.MagentaBack.toString = $estr;
Attribute.MagentaBack.__enum__ = Attribute;
Attribute.CyanBack = ["CyanBack",26];
Attribute.CyanBack.toString = $estr;
Attribute.CyanBack.__enum__ = Attribute;
Attribute.WhiteBack = ["WhiteBack",27];
Attribute.WhiteBack.toString = $estr;
Attribute.WhiteBack.__enum__ = Attribute;
Attribute.DefaultBackground = ["DefaultBackground",28];
Attribute.DefaultBackground.toString = $estr;
Attribute.DefaultBackground.__enum__ = Attribute;
var Sys = function() { };
Sys.__name__ = true;
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var js_node_ChildProcess = require("child_process");
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var ANSI = function() { };
ANSI.__name__ = true;
ANSI.aset = function(attributes) {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	var tmp = "\x1B" + "[";
	var _g = [];
	var _g1 = 0;
	while(_g1 < attributes.length) {
		var arg = attributes[_g1];
		++_g1;
		if(!js_Boot.__instanceof(arg,Attribute)) {
			throw new js__$Boot_HaxeError("Set argument is not an Attribute: " + Std.string(arg));
		}
		_g.push(ANSI.values.get(arg));
	}
	return tmp + _g.join(";") + "m";
};
ANSI.detectSupport = function() {
	if(Sys.systemName().toLowerCase().indexOf("window") == -1) {
		var result = -1;
		try {
			if(js_node_ChildProcess.spawnSync("tput",["colors"]).error == null) {
				result = 0;
			} else {
				result = 125;
			}
		} catch( e ) {
		}
		return result == 0;
	} else {
		return process.env["ANSICON"] != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var RunTests = function() {
};
RunTests.__name__ = true;
RunTests.main = function() {
	var this1 = [new tink_unit_TestSuiteBuilder0(new RunTests(),null)];
	tink_testrunner_Runner.run(this1).handle(tink_testrunner_Runner.exit);
};
RunTests.prototype = {
	test: function(asserts) {
		var e1 = "a";
		var lh = e1;
		var rh = "a";
		asserts["yield"](tink_streams_StreamStep.Data(new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(lh == rh),"e1 == 'a'" + " (" + tink_unit_Assert.stringify(lh) + " " + "==" + " " + tink_unit_Assert.stringify(rh) + ")",{ fileName : "RunTests.hx", lineNumber : 20, className : "RunTests", methodName : "test"})));
		asserts["yield"](tink_streams_StreamStep.End);
		return asserts;
	}
	,__class__: RunTests
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_node_buffer_Buffer = require("buffer").Buffer;
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 1000) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var a1 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(a1);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	var this1 = function(r) {
		f();
	};
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	process.nextTick(f);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = true;
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	clear: function() {
		this.list = null;
		this.cb = null;
	}
	,dissolve: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,__class__: tink_core_TypedError
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = true;
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core_Noise = { __ename__ : true, __constructs__ : ["Noise"] };
tink_core_Noise.Noise = ["Noise",0];
tink_core_Noise.Noise.toString = $estr;
tink_core_Noise.Noise.__enum__ = tink_core_Noise;
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		return new tink_core__$Lazy_LazyConst(f(this.value));
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = true;
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_LazyTrigger(f);
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	,gather: function() {
		return tink_core_FutureTrigger.gatherFuture(this);
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
tink_core__$Future_NestedFuture.__name__ = true;
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,gather: function() {
		return tink_core_FutureTrigger.gatherFuture(this);
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
	,__class__: tink_core__$Future_NestedFuture
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
	return this1;
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core__$Future_LazyTrigger = function(op) {
	this.op = op;
	tink_core_FutureTrigger.call(this);
};
tink_core__$Future_LazyTrigger.__name__ = true;
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
tink_core__$Future_LazyTrigger.prototype = $extend(tink_core_FutureTrigger.prototype,{
	eager: function() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	,map: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.map.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	,flatMap: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.flatMap.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	,handle: function(cb) {
		this.eager();
		return tink_core_FutureTrigger.prototype.handle.call(this,cb);
	}
	,__class__: tink_core__$Future_LazyTrigger
});
var tink_core_Outcome = { __ename__ : true, __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome[1] == 0) {
		return true;
	} else {
		return false;
	}
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return f(d);
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.prototype = {
	__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() { };
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	forEachAsync: function(item) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams_StepWise = function() { };
tink_streams_StepWise.__name__ = true;
tink_streams_StepWise.__super__ = tink_streams_StreamBase;
tink_streams_StepWise.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_StreamStep.End));
	}
	,forEachAsync: function(item) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var next = null;
			next = function() {
				while(true) {
					var touched = [false];
					_gthis.next().handle((function(touched1) {
						return function(step) {
							switch(step[1]) {
							case 0:
								var data = step[2];
								item(data).handle((function(touched2) {
									return function(resume) {
										if(!resume) {
											cb(tink_core_Outcome.Success(false));
										} else if(touched2[0]) {
											next();
										} else {
											touched2[0] = true;
										}
									};
								})(touched1));
								break;
							case 1:
								cb(tink_core_Outcome.Success(true));
								break;
							case 2:
								var e = step[2];
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						};
					})(touched));
					if(!touched[0]) {
						touched[0] = true;
						break;
					}
				}
			};
			var next1 = next;
			next1();
		});
	}
	,__class__: tink_streams_StepWise
});
var tink_streams_Accumulator = function() {
	this.buffered = [];
	this.waiting = [];
};
tink_streams_Accumulator.__name__ = true;
tink_streams_Accumulator.__super__ = tink_streams_StepWise;
tink_streams_Accumulator.prototype = $extend(tink_streams_StepWise.prototype,{
	next: function() {
		var _g = this.buffered.shift();
		if(_g == null) {
			if(this.end != null) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(this.end));
			} else {
				var ret = new tink_core_FutureTrigger();
				this.waiting.push(ret);
				return ret;
			}
		} else {
			var v = _g;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}
	}
	,'yield': function(step) {
		if(this.end != null) {
			return;
		}
		var tmp;
		switch(step[1]) {
		case 1:case 2:
			tmp = true;
			break;
		default:
			tmp = false;
		}
		if(tmp) {
			this.end = step;
		}
		var _g = this.waiting.shift();
		if(_g == null) {
			this.buffered.push(step);
		} else {
			var v = _g;
			v.trigger(step);
		}
	}
	,__class__: tink_streams_Accumulator
});
var tink_streams_StreamStep = { __ename__ : true, __constructs__ : ["Data","End","Fail"] };
tink_streams_StreamStep.Data = function(data) { var $x = ["Data",0,data]; $x.__enum__ = tink_streams_StreamStep; $x.toString = $estr; return $x; };
tink_streams_StreamStep.End = ["End",1];
tink_streams_StreamStep.End.toString = $estr;
tink_streams_StreamStep.End.__enum__ = tink_streams_StreamStep;
tink_streams_StreamStep.Fail = function(e) { var $x = ["Fail",2,e]; $x.__enum__ = tink_streams_StreamStep; $x.toString = $estr; return $x; };
var tink_testrunner_Assertion = function(holds,description,pos) {
	this.holds = holds;
	this.description = description;
	this.pos = pos;
};
tink_testrunner_Assertion.__name__ = true;
tink_testrunner_Assertion.prototype = {
	__class__: tink_testrunner_Assertion
};
var tink_testrunner__$Assertion_AssertionResult_$Impl_$ = {};
tink_testrunner__$Assertion_AssertionResult_$Impl_$.__name__ = true;
tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool = function(v) {
	if(v) {
		return tink_core_Outcome.Success(tink_core_Noise.Noise);
	} else {
		return tink_core_Outcome.Failure(null);
	}
};
var tink_testrunner_Case = function() { };
tink_testrunner_Case.__name__ = true;
tink_testrunner_Case.prototype = {
	__class__: tink_testrunner_Case
};
var tink_testrunner_Reporter = function() { };
tink_testrunner_Reporter.__name__ = true;
tink_testrunner_Reporter.prototype = {
	__class__: tink_testrunner_Reporter
};
var tink_testrunner_ReportType = { __ename__ : true, __constructs__ : ["BatchStart","SuiteStart","CaseStart","Assertion","CaseFinish","SuiteFinish","BatchFinish"] };
tink_testrunner_ReportType.BatchStart = ["BatchStart",0];
tink_testrunner_ReportType.BatchStart.toString = $estr;
tink_testrunner_ReportType.BatchStart.__enum__ = tink_testrunner_ReportType;
tink_testrunner_ReportType.SuiteStart = function(info) { var $x = ["SuiteStart",1,info]; $x.__enum__ = tink_testrunner_ReportType; $x.toString = $estr; return $x; };
tink_testrunner_ReportType.CaseStart = function(info) { var $x = ["CaseStart",2,info]; $x.__enum__ = tink_testrunner_ReportType; $x.toString = $estr; return $x; };
tink_testrunner_ReportType.Assertion = function(assertion) { var $x = ["Assertion",3,assertion]; $x.__enum__ = tink_testrunner_ReportType; $x.toString = $estr; return $x; };
tink_testrunner_ReportType.CaseFinish = function(result) { var $x = ["CaseFinish",4,result]; $x.__enum__ = tink_testrunner_ReportType; $x.toString = $estr; return $x; };
tink_testrunner_ReportType.SuiteFinish = function(result) { var $x = ["SuiteFinish",5,result]; $x.__enum__ = tink_testrunner_ReportType; $x.toString = $estr; return $x; };
tink_testrunner_ReportType.BatchFinish = function(result) { var $x = ["BatchFinish",6,result]; $x.__enum__ = tink_testrunner_ReportType; $x.toString = $estr; return $x; };
var tink_testrunner_Formatter = function() { };
tink_testrunner_Formatter.__name__ = true;
tink_testrunner_Formatter.prototype = {
	__class__: tink_testrunner_Formatter
};
var tink_testrunner_BasicFormatter = function() {
};
tink_testrunner_BasicFormatter.__name__ = true;
tink_testrunner_BasicFormatter.__interfaces__ = [tink_testrunner_Formatter];
tink_testrunner_BasicFormatter.prototype = {
	success: function(v) {
		return this.color(v,"green");
	}
	,error: function(v) {
		return this.color(v,"red");
	}
	,info: function(v) {
		return this.color(v,"yellow");
	}
	,extra: function(v) {
		return this.color(v,"cyan");
	}
	,mute: function(v) {
		return this.color(v,"blue");
	}
	,color: function(v,c) {
		return v;
	}
	,__class__: tink_testrunner_BasicFormatter
};
var tink_testrunner_AnsiFormatter = function() {
	tink_testrunner_BasicFormatter.call(this);
};
tink_testrunner_AnsiFormatter.__name__ = true;
tink_testrunner_AnsiFormatter.__super__ = tink_testrunner_BasicFormatter;
tink_testrunner_AnsiFormatter.prototype = $extend(tink_testrunner_BasicFormatter.prototype,{
	color: function(v,c) {
		switch(c) {
		case "blue":
			return ANSI.aset([Attribute.Blue]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "cyan":
			return ANSI.aset([Attribute.Cyan]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "green":
			return ANSI.aset([Attribute.Green]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "magenta":
			return ANSI.aset([Attribute.Magenta]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "red":
			return ANSI.aset([Attribute.Red]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "yellow":
			return ANSI.aset([Attribute.Yellow]) + v + ANSI.aset([Attribute.DefaultForeground]);
		default:
			return ANSI.aset([Attribute.DefaultForeground]) + v;
		}
	}
	,__class__: tink_testrunner_AnsiFormatter
});
var tink_testrunner_BasicReporter = function(formatter) {
	this.noise = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
	var tmp;
	if(formatter != null) {
		tmp = formatter;
	} else {
		var _g = Sys.systemName();
		if(_g == "Windows") {
			tmp = new tink_testrunner_BasicFormatter();
		} else {
			tmp = new tink_testrunner_AnsiFormatter();
		}
	}
	this.formatter = tmp;
};
tink_testrunner_BasicReporter.__name__ = true;
tink_testrunner_BasicReporter.__interfaces__ = [tink_testrunner_Reporter];
tink_testrunner_BasicReporter.prototype = {
	report: function(type) {
		switch(type[1]) {
		case 0:
			break;
		case 1:
			var info = type[2];
			this.println(" ");
			this.println(this.formatter.info(info.name));
			break;
		case 2:
			var info1 = type[2];
			var m = this.formatter.info(this.indent(info1.name,2)) + ": ";
			if(info1.pos != null) {
				m += this.formatter.extra("[" + info1.pos.fileName + ":" + info1.pos.lineNumber + "] ");
			}
			if(info1.description != null) {
				m += this.formatter.mute(info1.description);
			}
			this.println(m);
			break;
		case 3:
			var assertion = type[2];
			var failure = null;
			var holds;
			var _g = assertion.holds;
			switch(_g[1]) {
			case 0:
				holds = this.formatter.success("[OK]");
				break;
			case 1:
				var msg = _g[2];
				failure = msg;
				holds = this.formatter.error("[FAIL]");
				break;
			}
			var pos = this.formatter.extra("[" + assertion.pos.fileName + ":" + assertion.pos.lineNumber + "]");
			var m1 = this.indent("- " + holds + " " + pos + " " + assertion.description,4);
			this.println(m1);
			if(failure != null) {
				this.println(this.formatter.error(this.indent(failure,8)));
			}
			break;
		case 4:
			var results = type[2].results;
			switch(results[1]) {
			case 0:
				break;
			case 1:
				var e = results[2];
				this.println(this.formatter.error(this.indent("- " + e.toString(),4)));
				break;
			}
			break;
		case 5:
			var result = type[2];
			var _g1 = result.result;
			switch(_g1[1]) {
			case 0:
				break;
			case 1:
				var e1 = _g1[2];
				this.println(this.formatter.error(this.indent("Setup Failed: " + e1.toString(),2)));
				break;
			case 2:
				var e2 = _g1[2];
				this.println(this.formatter.error(this.indent("Teardown Failed: " + e2.toString(),2)));
				break;
			}
			break;
		case 6:
			var result1 = type[2];
			var summary = tink_testrunner__$Runner_BatchResult_$Impl_$.summary(result1);
			var total = summary.assertions.length;
			var failures = 0;
			var errors = 0;
			var _g2 = 0;
			var _g11 = summary.failures;
			while(_g2 < _g11.length) {
				var f = _g11[_g2];
				++_g2;
				if(f[1] == 0) {
					++failures;
				} else {
					++errors;
				}
			}
			var success = total - failures;
			var m_b = "";
			m_b += total == null ? "null" : "" + total;
			m_b += " Assertion";
			if(total > 1) {
				m_b += "s";
			}
			m_b += "   ";
			m_b += success == null ? "null" : "" + success;
			m_b += " Success";
			m_b += "   ";
			m_b += failures == null ? "null" : "" + failures;
			m_b += " Failure";
			if(failures > 1) {
				m_b += "s";
			}
			m_b += "   ";
			m_b += errors == null ? "null" : "" + errors;
			m_b += " Error";
			if(errors > 1) {
				m_b += "s";
			}
			var m2 = m_b += "   ";
			this.println(" ");
			this.println(failures == 0 && errors == 0 ? this.formatter.success(m2) : this.formatter.error(m2));
			this.println(" ");
			break;
		}
		return this.noise;
	}
	,println: function(v) {
		process.stdout.write(v);
		process.stdout.write("\n");
	}
	,indent: function(v,i) {
		if(i == null) {
			i = 0;
		}
		return v.split("\n").map(function(line) {
			return StringTools.lpad(""," ",i) + line;
		}).join("\n");
	}
	,__class__: tink_testrunner_BasicReporter
};
var tink_testrunner_Runner = function() { };
tink_testrunner_Runner.__name__ = true;
tink_testrunner_Runner.exit = function(result) {
	process.exit(tink_testrunner__$Runner_BatchResult_$Impl_$.summary(result).failures.length);
};
tink_testrunner_Runner.run = function(batch,reporter,timers) {
	if(reporter == null) {
		reporter = new tink_testrunner_BasicReporter();
	}
	if(timers == null) {
		timers = new tink_testrunner_HaxeTimerManager();
	}
	var includeMode = false;
	var _g = 0;
	var _g1 = batch;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(includeMode) {
			break;
		}
		var _g2 = 0;
		var _g3 = s.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			if(c.include) {
				includeMode = true;
				break;
			}
		}
	}
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		reporter.report(tink_testrunner_ReportType.BatchStart).handle(function(_) {
			var iter = HxOverrides.iter(batch);
			var results = [];
			var next = null;
			next = function() {
				if(iter.hasNext()) {
					var suite = iter.next();
					tink_testrunner_Runner.runSuite(suite,reporter,timers,includeMode).handle(function(o) {
						results.push(o);
						reporter.report(tink_testrunner_ReportType.SuiteFinish(o)).handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(next));
					});
				} else {
					var next1 = reporter.report(tink_testrunner_ReportType.BatchFinish(results));
					var f = cb;
					var a1 = results;
					next1.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
						f(a1);
					}));
				}
			};
			var next2 = next;
			next2();
		});
	});
};
tink_testrunner_Runner.runSuite = function(suite,reporter,timers,includeMode) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		reporter.report(tink_testrunner_ReportType.SuiteStart(suite.info)).handle(function(_) {
			var cases = suite.cases.filter(function(c) {
				if(!c.exclude) {
					if(!(!includeMode)) {
						return c.include;
					} else {
						return true;
					}
				} else {
					return false;
				}
			});
			if(cases.length > 0) {
				var iter = HxOverrides.iter(cases);
				var results = [];
				var next = null;
				next = function() {
					if(iter.hasNext()) {
						var caze = iter.next();
						tink_testrunner_Runner.runCase(caze,suite,reporter,timers).handle(function(r) {
							results.push(r);
							next();
						});
					} else {
						suite.teardown().handle(function(o) {
							var next1;
							switch(o[1]) {
							case 0:
								next1 = tink_testrunner_SuiteResultType.Success(results);
								break;
							case 1:
								var e = o[2];
								next1 = tink_testrunner_SuiteResultType.TeardownFailed(e,results);
								break;
							}
							cb({ info : suite.info, result : next1});
						});
					}
				};
				var next2 = next;
				suite.setup().handle(function(o1) {
					switch(o1[1]) {
					case 0:
						next2();
						break;
					case 1:
						var e1 = o1[2];
						cb({ info : suite.info, result : tink_testrunner_SuiteResultType.SetupFailed(e1)});
						break;
					}
				});
			} else {
				cb({ info : suite.info, result : tink_testrunner_SuiteResultType.Success([])});
			}
		});
	});
};
tink_testrunner_Runner.runCase = function(caze,suite,reporter,timers) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		reporter.report(tink_testrunner_ReportType.CaseStart(caze.info)).handle(function(_) {
			tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(tink_testrunner_TimeoutHelper.timeout(suite.before(),caze.timeout,timers,caze.pos),function(_1) {
				var assertions = [];
				return tink_testrunner_TimeoutHelper.timeout(tink_core__$Future_Future_$Impl_$.next(caze.execute().forEachAsync(function(a) {
					assertions.push(a);
					var ret = reporter.report(tink_testrunner_ReportType.Assertion(a)).map(function(_2) {
						return true;
					});
					return ret.gather();
				}),function(_3) {
					return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(assertions));
				}),caze.timeout,timers,{ fileName : "Runner.hx", lineNumber : 107, className : "tink.testrunner.Runner", methodName : "runCase"});
			}),function(result) {
				return tink_core__$Promise_Promise_$Impl_$.next(tink_testrunner_TimeoutHelper.timeout(suite.after(),caze.timeout,timers,caze.pos),function(_4) {
					return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(result));
				});
			}).handle(function(result1) {
				var results = { info : caze.info, results : result1};
				reporter.report(tink_testrunner_ReportType.CaseFinish(results)).handle(function(_5) {
					cb(results);
				});
			});
		});
	});
};
var tink_testrunner_TimeoutHelper = function() { };
tink_testrunner_TimeoutHelper.__name__ = true;
tink_testrunner_TimeoutHelper.timeout = function(promise,ms,timers,pos) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var done = false;
		var timer = null;
		var link = promise.handle(function(o) {
			done = true;
			if(timer != null) {
				timer.stop();
			}
			cb(o);
		});
		if(!done && timers != null) {
			timer = timers.schedule(ms,function() {
				if(link != null) {
					link.dissolve();
				}
				var timer1 = tink_core_Outcome.Failure(new tink_core_TypedError(null,"Timed out after " + ms + " ms",pos));
				cb(timer1);
			});
		}
	});
};
var tink_testrunner__$Runner_BatchResult_$Impl_$ = {};
tink_testrunner__$Runner_BatchResult_$Impl_$.__name__ = true;
tink_testrunner__$Runner_BatchResult_$Impl_$.summary = function(this1) {
	var ret = { assertions : [], failures : []};
	var handleCases = function(cases) {
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			var _g1 = c.results;
			switch(_g1[1]) {
			case 0:
				var assertions = _g1[2];
				ret.assertions = ret.assertions.concat(assertions);
				var ret1 = ret.failures;
				var handleCases1 = assertions.filter(function(a) {
					return !tink_core_OutcomeTools.isSuccess(a.holds);
				}).map(function(a1) {
					return tink_testrunner_FailureType.AssertionFailed(a1);
				});
				ret.failures = ret1.concat(handleCases1);
				break;
			case 1:
				var e = _g1[2];
				ret.failures.push(tink_testrunner_FailureType.CaseFailed(e));
				break;
			}
		}
	};
	var _g2 = 0;
	while(_g2 < this1.length) {
		var s = this1[_g2];
		++_g2;
		var _g11 = s.result;
		switch(_g11[1]) {
		case 0:
			var cases1 = _g11[2];
			handleCases(cases1);
			break;
		case 1:
			var e1 = _g11[2];
			ret.failures.push(tink_testrunner_FailureType.SuiteFailed(e1));
			break;
		case 2:
			var cases2 = _g11[3];
			var e2 = _g11[2];
			handleCases(cases2);
			ret.failures.push(tink_testrunner_FailureType.SuiteFailed(e2));
			break;
		}
	}
	return ret;
};
var tink_testrunner_SuiteResultType = { __ename__ : true, __constructs__ : ["Success","SetupFailed","TeardownFailed"] };
tink_testrunner_SuiteResultType.Success = function(cases) { var $x = ["Success",0,cases]; $x.__enum__ = tink_testrunner_SuiteResultType; $x.toString = $estr; return $x; };
tink_testrunner_SuiteResultType.SetupFailed = function(e) { var $x = ["SetupFailed",1,e]; $x.__enum__ = tink_testrunner_SuiteResultType; $x.toString = $estr; return $x; };
tink_testrunner_SuiteResultType.TeardownFailed = function(e,cases) { var $x = ["TeardownFailed",2,e,cases]; $x.__enum__ = tink_testrunner_SuiteResultType; $x.toString = $estr; return $x; };
var tink_testrunner_FailureType = { __ename__ : true, __constructs__ : ["AssertionFailed","CaseFailed","SuiteFailed"] };
tink_testrunner_FailureType.AssertionFailed = function(assertion) { var $x = ["AssertionFailed",0,assertion]; $x.__enum__ = tink_testrunner_FailureType; $x.toString = $estr; return $x; };
tink_testrunner_FailureType.CaseFailed = function(err) { var $x = ["CaseFailed",1,err]; $x.__enum__ = tink_testrunner_FailureType; $x.toString = $estr; return $x; };
tink_testrunner_FailureType.SuiteFailed = function(err) { var $x = ["SuiteFailed",2,err]; $x.__enum__ = tink_testrunner_FailureType; $x.toString = $estr; return $x; };
var tink_testrunner_SuiteObject = function() { };
tink_testrunner_SuiteObject.__name__ = true;
tink_testrunner_SuiteObject.prototype = {
	__class__: tink_testrunner_SuiteObject
};
var tink_testrunner_BasicSuite = function(info,cases) {
	this.info = info;
	this.cases = cases;
};
tink_testrunner_BasicSuite.__name__ = true;
tink_testrunner_BasicSuite.__interfaces__ = [tink_testrunner_SuiteObject];
tink_testrunner_BasicSuite.prototype = {
	setup: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,before: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,after: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,teardown: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,__class__: tink_testrunner_BasicSuite
};
var tink_testrunner_Timer = function() { };
tink_testrunner_Timer.__name__ = true;
tink_testrunner_Timer.prototype = {
	__class__: tink_testrunner_Timer
};
var tink_testrunner_TimerManager = function() { };
tink_testrunner_TimerManager.__name__ = true;
tink_testrunner_TimerManager.prototype = {
	__class__: tink_testrunner_TimerManager
};
var tink_testrunner_HaxeTimer = function(ms,f) {
	this.timer = haxe_Timer.delay(f,ms);
};
tink_testrunner_HaxeTimer.__name__ = true;
tink_testrunner_HaxeTimer.__interfaces__ = [tink_testrunner_Timer];
tink_testrunner_HaxeTimer.prototype = {
	stop: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
	,__class__: tink_testrunner_HaxeTimer
};
var tink_testrunner_HaxeTimerManager = function() {
};
tink_testrunner_HaxeTimerManager.__name__ = true;
tink_testrunner_HaxeTimerManager.__interfaces__ = [tink_testrunner_TimerManager];
tink_testrunner_HaxeTimerManager.prototype = {
	schedule: function(ms,f) {
		return new tink_testrunner_HaxeTimer(ms,f);
	}
	,__class__: tink_testrunner_HaxeTimerManager
};
var tink_unit_Assert = function() { };
tink_unit_Assert.__name__ = true;
tink_unit_Assert.stringify = function(v) {
	if(typeof(v) == "string" || typeof(v) == "number" || typeof(v) == "boolean") {
		return JSON.stringify(v);
	} else {
		return Std.string(v);
	}
};
var tink_unit_TestCase = function(info,test,timeout,include,exclude,pos) {
	this.info = info;
	this.test = test;
	this.timeout = timeout;
	this.include = include;
	this.exclude = exclude;
	this.pos = pos;
};
tink_unit_TestCase.__name__ = true;
tink_unit_TestCase.__interfaces__ = [tink_testrunner_Case];
tink_unit_TestCase.prototype = {
	execute: function() {
		return this.test();
	}
	,__class__: tink_unit_TestCase
};
var tink_unit_TestSuiteBase = function(info,cases) {
	tink_testrunner_BasicSuite.call(this,info,cases);
};
tink_unit_TestSuiteBase.__name__ = true;
tink_unit_TestSuiteBase.__super__ = tink_testrunner_BasicSuite;
tink_unit_TestSuiteBase.prototype = $extend(tink_testrunner_BasicSuite.prototype,{
	__class__: tink_unit_TestSuiteBase
});
var tink_unit_TestSuiteBuilder0 = function(target,name) {
	var pos = { lineNumber : 18, fileName : "RunTests.hx", methodName : "test", className : "RunTests"};
	var tmp = new tink_unit_TestCase({ name : "test", description : null, pos : { lineNumber : 18, fileName : "RunTests.hx", methodName : "test", className : "RunTests"}},function() {
		var this1 = new tink_streams_Accumulator();
		return target.test(this1);
	},5000,false,false,pos);
	tink_unit_TestSuiteBase.call(this,{ name : name == null ? "RunTests" : name},[tmp]);
	this.target = target;
};
tink_unit_TestSuiteBuilder0.__name__ = true;
tink_unit_TestSuiteBuilder0.__super__ = tink_unit_TestSuiteBase;
tink_unit_TestSuiteBuilder0.prototype = $extend(tink_unit_TestSuiteBase.prototype,{
	setup: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,before: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,after: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,teardown: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,__class__: tink_unit_TestSuiteBuilder0
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
js_Boot.__toStr = ({ }).toString;
ANSI.values = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(Attribute.Off,0);
	_g.set(Attribute.Bold,1);
	_g.set(Attribute.Underline,4);
	_g.set(Attribute.Blink,5);
	_g.set(Attribute.ReverseVideo,7);
	_g.set(Attribute.Concealed,8);
	_g.set(Attribute.BoldOff,22);
	_g.set(Attribute.UnderlineOff,24);
	_g.set(Attribute.BlinkOff,25);
	_g.set(Attribute.NormalVideo,27);
	_g.set(Attribute.ConcealedOff,28);
	_g.set(Attribute.Black,30);
	_g.set(Attribute.Red,31);
	_g.set(Attribute.Green,32);
	_g.set(Attribute.Yellow,33);
	_g.set(Attribute.Blue,34);
	_g.set(Attribute.Magenta,35);
	_g.set(Attribute.Cyan,36);
	_g.set(Attribute.White,37);
	_g.set(Attribute.DefaultForeground,39);
	_g.set(Attribute.BlackBack,40);
	_g.set(Attribute.RedBack,41);
	_g.set(Attribute.GreenBack,42);
	_g.set(Attribute.YellowBack,43);
	_g.set(Attribute.BlueBack,44);
	_g.set(Attribute.MagentaBack,45);
	_g.set(Attribute.CyanBack,46);
	_g.set(Attribute.WhiteBack,47);
	_g.set(Attribute.DefaultBackground,49);
	$r = _g;
	return $r;
}(this));
ANSI.available = ANSI.detectSupport();
ANSI.strip = false;
ANSI.stripIfUnavailable = true;
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
RunTests.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
